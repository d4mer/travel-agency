.row{

  /* this creates empty space after the row and columns so that it doesn'tnover lap underneath */

  @mixin clearfix;

/* this conteracts the padding on the last column of the rox see _wrapper overflow*/
  &--gutters {
    margin-right: -65px;
  }
  &--gutters > div {
    padding-right: 65px;
  }

  &--gutters-small {
    margin-right: -45px;
  }

  &--gutters-small > div {
    padding-right: 45px;
  }

  &--gutters-large {
    margin-right: -100px;
  }

  &--gutters-large > div {
    padding-right: 100px;
  }

  &__row__b-margin-until-medium {
    margin-bottom: 1rem;
  }

  &--top-padding {
    padding-top: 80px;
  }
/* Here we have told the browser to disply the row and columns side by side when it is a screen size of 800px which is atMedium */
  @mixin atMedium {

    &__row__b-margin-until-medium {
      margin-bottom: 0;
    }

    &__medium-4 {
      float: left;
      width: 33.33%;
    }

    &__medium-4--larger{
      width: 37%;
    }

    &__medium-6 {
      float: left;
      width: 50%;
    }

    &__medium-8 {
      float: left;
      width: 66.66%;
    }

    &__medium-8--smaller{
      width: 63%;
    }
  }

  @mixin atLarge {

    &__row__b-margin-until-large {
      margin-bottom: 0;
    }

    &__large-4 {
      float: left;
      width: 33.33%;
    }

    &__large-4--larger{
      width: 37%;
    }

    &__large-6 {
      float: left;
      width: 50%;
    }

    &__large-8 {
      float: left;
      width: 66.66%;
    }

    &__large-8--smaller{
      width: 63%;
    }
  }

/*Begin equal height rules to make the white background the same height*/
 &--equal-h-atmedium {
   @mixin atMedium {
     display: flex;
   }
    & > div {
      float: none;
      display: flex;
    }
 }

 &--equal-h-atlarge {
   @mixin atLarge {
     display: flex;
   }
    & > div {
      float: none;
      display: flex;
    }
 }
}
